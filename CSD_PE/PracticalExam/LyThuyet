                 Ưu điểm của cấu trúc dữ liệu heap:
- Hỗ trợ hiệu quả cho các thao tác hàng đợi ưu tiên.
- Việc chèn và xóa có độ phức tạp O(log n).
- Heap hữu ích cho việc triển khai các thuật toán sắp xếp hiệu quả như HeapSort.


==============================================================================================================================
                 Tại sao MergeSort ổn định và tại sao Quicksort không ổn định?
MergeSort ổn định vì nó giữ nguyên thứ tự tương đối của các phần tử bằng nhau.
Quicksort không ổn định vì nó có thể hoán đổi các phần tử bằng nhau, thay đổi thứ tự tương đối của chúng.


==============================================================================================================================
                Ưu điểm và nhược điểm của việc sử dụng mảng để quản lý các nhiệm vụ:
Ưu điểm:
- Thời gian truy xuất nhanh O(1) khi lấy phần tử theo chỉ số.
- Đơn giản và dễ sử dụng.

Nhược điểm:
- Việc chèn và xóa có độ phức tạp O(n) trong trường hợp xấu nhất do phải dịch chuyển các phần tử.
- Kích thước cố định, nghĩa là không thể thay đổi kích thước một cách linh hoạt.
- Không hiệu quả cho việc tìm kiếm trừ khi mảng đã được sắp xếp (O(n) cho tìm kiếm tuần tự).


==============================================================================================================================
        Quick Sort là một thuật toán sắp xếp hiệu quả được sử dụng rộng rãi trong thực tế vì các điểm mạnh sau:
- Hiệu quả trong trường hợp trung bình: Quick Sort có thời gian chạy trung bình là O(n log n), nhanh hơn so với nhiều
thuật toán sắp xếp khác như Merge Sort hay Insertion Sort. Điều này là do Quick Sort chia dãy số thành các phần nhỏ dựa
trên điểm chốt (pivot) và sắp xếp các phần đó đồng thời.
- Dễ cài đặt: Quick Sort có cấu trúc đơn giản và dễ cài đặt, không yêu cầu nhiều bộ nhớ phụ như Merge Sort.
Thuật toán Quick Sort có thể được triển khai dưới dạng đệ quy hoặc không đệ quy.
- Hiệu quả trong việc sắp xếp dữ liệu lớn: Với dữ liệu lớn, Quick Sort thường hiệu quả hơn các thuật toán khác
như Merge Sort vì không cần sử dụng bộ nhớ phụ để lưu trữ các phần tử tạm thời.
- Hiệu quả với dữ liệu ngẫu nhiên: Trong trường hợp dữ liệu ngẫu nhiên hoặc hầu hết là ngẫu nhiên, Quick Sort
thường thực hiện tốt và nhanh chóng.


==============================================================================================================================
                                    ƯU ĐIỂM CỦA BST

#Cây tìm kiếm nhị phân (Binary Search Tree - BST) là một cấu trúc dữ liệu linh hoạt và hiệu quả trong việc quản lý dữ liệu.
Dưới đây là một số ưu điểm của BST trong việc quản lý dữ liệu:
- Tìm kiếm hiệu quả: BST cho phép tìm kiếm một phần tử nhanh chóng với độ phức tạp trung bình là O(log n), nơi n là số
 lượng các phần tử trong cây. Điều này đặc biệt hữu ích khi cần tìm kiếm, truy cập hoặc cập nhật dữ liệu nhanh chóng.

- Thêm và xóa linh hoạt: BST cho phép thêm và xóa một phần tử một cách dễ dàng với độ phức tạp trung bình
 cũng là O(log n). Điều này làm cho BST trở thành một cấu trúc dữ liệu phù hợp để quản lý dữ liệu mà thường xuyên
 cần thêm/xóa phần tử.

- Duy trì dữ liệu được sắp xếp: Các phần tử trong BST được lưu trữ theo thứ tự thứ tự sắp xếp, giúp cho việc truy cập, in
 ra dữ liệu theo thứ tự trở nên dễ dàng và nhanh chóng.

- Phân chia dữ liệu: BST cho phép ta chia dữ liệu thành các phần nhỏ hơn để tìm kiếm, truy cập và cập nhật dữ liệu
 một cách hiệu quả. Dễ dàng tìm kiếm phần tử nhỏ nhất hoặc lớn nhất trong BST.

- Cấu trúc dữ liệu linh hoạt: BST có thể được sử dụng để xây dựng nhiều loại cấu trúc dữ liệu khác nhau, như cây AVL,
 cây đỏ-đen, hay cây Splay để tối ưu hóa hoặc mở rộng chức năng quản lý dữ liệu.
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                                     NHƯỢC ĐIỂM CỦA BST

#Một số hạn chế của cây tìm kiếm nhị phân (BST) bao gồm:
- Khả năng trở thành cây không cân bằng (unbalanced tree): Trong trường hợp dữ liệu được thêm vào BST theo một thứ tự
đã sắp xếp hoặc ngược lại, BST có thể trở thành một cây không cân bằng, dẫn đến hiệu suất tìm kiếm trở nên kém
hơn với độ phức tạp trở thành O(n) thay vì O(log n).

- Độ phức tạp tệ nhất của tìm kiếm: Trong trường hợp cây BST trở thành một danh sách liên kết, việc tìm kiếm có thể
có độ phức tạp O(n), tức là phức tạp hóa thành tìm kiếm tuần tự.

- Độ cao không cố định: Mặc dù tìm kiếm trung bình trong BST có độ phức tạp O(log n), nhưng độ cao của cây không cố
định và có thể tăng lên đến O(n) trong trường hợp xấu nhất.

- Yêu cầu không gian lưu trữ: Cấu trúc của BST yêu cầu một lượng bộ nhớ không cố định, vì vậy có thể làm tăng yêu
cầu về không gian lưu trữ so với một số cấu trúc dữ liệu khác như cây AVL.

- Nhạy cảm với trường hợp tệ nhất: Nếu dữ liệu được thêm vào BST không được cân đối, BST có thể trở nên rất imbalanced,
dẫn đến hiệu suất tìm kiếm và cập nhật thấp.
